{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMv5Uz6qIurqZ+xAVGcQqum"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"8ZB65h_8ahFG"},"outputs":[],"source":["import openai\n","import streamlit as st\n","import os, tenacity\n","import pandas as pd\n","import numpy as np\n","from numpy import dot\n","from numpy.linalg import norm\n","import ast\n","from openai.embeddings_utils import get_embedding\n","from streamlit_chat import message\n","\n","\n","openai.api_key = \"사용자의 OpenAI API 키 값\"\n","\n","folder_path = './data'\n","file_name = 'embedding.csv'\n","file_path = os.path.join(folder_path, file_name)\n","\n","if os.path.isfile(file_path):\n","    print(f\"{file_path} 파일이 존재합니다.\")\n","    df = pd.read_csv(file_path)\n","    df['embedding'] = df['embedding'].apply(ast.literal_eval)\n","else:\n","    folder_path = './data' # data 폴더 경로\n","    txt_files = [file for file in os.listdir(folder_path) if file.endswith('.txt')]  # txt 파일 목록\n","\n","    data = []\n","    for file in txt_files:\n","        txt_file_path = os.path.join(folder_path, file)\n","        with open(txt_file_path, 'r', encoding='utf-8') as f:\n","            text = f.read() # 파일 내용 읽기\n","            data.append(text)\n","\n","    df = pd.DataFrame(data, columns=['text'])\n","\n","    # 데이터프레임의 text 열에 대해서 embedding을 추출\n","    df['embedding'] = df.apply(lambda row: get_embedding(\n","        row.text,\n","        engine=\"text-embedding-ada-002\"\n","    ), axis=1)\n","    df.to_csv(file_path, index=False, encoding='utf-8-sig')\n","\n","def cos_sim(A, B):\n","  return dot(A, B)/(norm(A)*norm(B))\n","\n","def return_answer_candidate(df, query):\n","    query_embedding = get_embedding(\n","        query,\n","        engine=\"text-embedding-ada-002\"\n","    )\n","    df[\"similarity\"] = df.embedding.apply(lambda x: cos_sim(np.array(x), np.array(query_embedding)))\n","    top_three_doc = df.sort_values(\"similarity\", ascending=False).head(3)\n","    return top_three_doc\n","\n","def create_prompt(df, query):\n","    result = return_answer_candidate(df, query)\n","    system_role = f\"\"\"You are an artificial intelligence language model named \"정채기\" that specializes in summarizing \\\n","    and answering documents about Seoul's youth policy, developed by developers 사용자1 and 사용자2.\n","    You need to take a given document and return a very detailed summary of the document in the query language.\n","    Here are the document:\n","            doc 1 :\"\"\" + str(result.iloc[0]['text']) + \"\"\"\n","            doc 2 :\"\"\" + str(result.iloc[1]['text']) + \"\"\"\n","            doc 3 :\"\"\" + str(result.iloc[2]['text']) + \"\"\"\n","    You must return in Korean. Return a accurate answer based on the document.\n","    \"\"\"\n","    user_content = f\"\"\"User question: \"{str(query)}\". \"\"\"\n","\n","    messages = [\n","        {\"role\": \"system\", \"content\": system_role},\n","        {\"role\": \"user\", \"content\": user_content}\n","    ]\n","\n","    return messages\n","\n","def generate_response(messages):\n","    result = openai.ChatCompletion.create(\n","        model=\"gpt-3.5-turbo\",\n","        messages=messages,\n","        temperature=0.4,\n","        max_tokens=500)\n","    return result['choices'][0]['message']['content']\n","\n","st.image('images/ask_me_chatbot.png')\n","\n","if 'generated' not in st.session_state:\n","    st.session_state['generated'] = []\n","\n","if 'past' not in st.session_state:\n","    st.session_state['past'] = []\n","\n","with st.form('form', clear_on_submit=True):\n","    user_input = st.text_input('정책을 물어보세요!', '', key='input')\n","    submitted = st.form_submit_button('Send')\n","\n","if submitted and user_input:\n","    # 프롬프트 생성 후 프롬프트를 기반으로 챗봇의 답변을 반환\n","    prompt = create_prompt(df, user_input)\n","    chatbot_response = generate_response(prompt)\n","    st.session_state['past'].append(user_input)\n","    st.session_state[\"generated\"].append(chatbot_response)\n","\n","if st.session_state['generated']:\n","    for i in reversed(range(len(st.session_state['generated']))):\n","        message(st.session_state['past'][i], is_user=True, key=str(i) + '_user')\n","        message(st.session_state[\"generated\"][i], key=str(i))"]}]}